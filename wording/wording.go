package wording

import "fmt"

// List of keys available for wording
const (
	HelloOne            = "hello_one"
	HelloTwo            = "hello_two"
	HelloTwoReplies     = "hello_quick_reply"
	Cancel              = "cancel"
	StartCreateAlert    = "start_create_alert"
	AskListSchedule     = "ask_list_schedule"
	AskOrigin           = "ask_origin"
	AskDestination      = "ask_destination"
	AskSchedule         = "ask_schedule"
	ConfirmationAlert   = "confirmation_alert"
	ChoiceOutOfRange    = "choice_out_of_range"
	ReAskSelectSchedule = "re_ask_select_schedule"
	Retry               = "retry"
	IssueOne            = "issue_one"
	IssueTwo            = "issue_two"
	HasFail             = "has_fail"
)

var (
	wordings = map[string][]string{
		HelloOne:            {"Bonjour ! Je suis Simone de la SNCF"},
		HelloTwo:            {"Je suis lÃ  pour te prÃ©venir si ton train est pertubÃ© et surtout pour te trouver une solution ğŸ˜‰"},
		HelloTwoReplies:     {"CrÃ©er mon alerte"},
		StartCreateAlert:    {"ğŸ˜Š C'est parti !"},
		AskOrigin:           {"Je vais avoir besoin de ta gare de dÃ©part !"},
		AskDestination:      {"DÃ©part de %s c'est notÃ© ! Peux-tu me dire ta gare de destination ?"},
		AskSchedule:         {"%s -> %s, Ã  quelle heure ?"},
		AskListSchedule:     {"J'ai une liste de train, lequel correspond Ã  ton train ?"},
		ConfirmationAlert:   {"ğŸ‘Œ C'est bon pour moi ! Ton alerte est bien enregistrÃ©e ! Et comme on dit, \"Pas de nouvelles, bonne nouvelles ğŸ˜‰\""},
		ChoiceOutOfRange:    {"OulÃ  ğŸ˜µ Tu vas trop loin, je n'ai que %d choix"},
		ReAskSelectSchedule: {"DÃ©solÃ© mais, quel trajet correspond Ã  ton train ?"},
		Retry:               {"TrÃ¨s bien, recommenÃ§ons depuis le dÃ©but"},
		Cancel:              {"TrÃ¨s bien, j'arrÃªte !"},
		IssueOne:            {"Hey, malheuresement ton train au dÃ©part de %s Ã  %s est %s. âœŠâœŠ"},
		IssueTwo:            {"Je ne suis pas encore capable de t'aider ğŸ˜¢. Mais promis je travaille dur pour y arriver ! Bon courage ğŸ˜Š"},
		HasFail:             {"DÃ©solÃ©, il semble que quelque chose n'est pas fonctionnÃ© correctement, peux-tu rÃ©essayer plus tard ?"},
	}
)

// Get random message for the key
func Get(key string, a ...interface{}) string {
	str, ok := wordings[key]

	if !ok {
		return ""
	}

	return fmt.Sprintf(str[0], a...)
}
